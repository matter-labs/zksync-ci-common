name: Release-please

on:
  workflow_call:
    secrets:
      gh_token:
        description: 'GitHub token'
        required: true
      cargo_registry_token:
        description: 'Cargo registry token'
        required: true
      slack_webhook:
        description: 'Slack webhook for notifications'
        required: true
    inputs:
      manifest:
        type: string
        description: 'Path to release-please manifest file'
        required: true
      config:
        type: string
        description: 'Path to release-please configuration file'
        required: true
      run_build:
        type: boolean
        description: 'Build the workspace before release'
        required: false
        default: true
      run_tests:
        type: boolean
        description: 'Run tests before release'
        required: false
        default: false
      publish-to-crates-io:
        type: boolean
        description: 'Whether to publish to crates.io'
        required: false
        default: false
      update-cargo-lock:
        type: boolean
        description: 'Whether to update Cargo.lock'
        required: false
        default: true
      org-owner:
        type: string
        description: 'Organization to add as owner of the crates.'
        required: false
        default: 'github:matter-labs:crates-io'
      git-user-name:
        type: string
        description: 'Name of the user to use for git operations.'
        required: false
        default: 'zksync-era-bot'
      git-user-email:
        type: string
        description: 'Email of the user to use for git operations.'
        required: false
        default: 'zksync-era-bot@users.noreply.github.com'

jobs:

  release-please:
    runs-on: ubuntu-latest
    outputs:
      prs_created: ${{ steps.release.outputs.prs_created }}
      releases_created: ${{ steps.release.outputs.releases_created }}
      releases: ${{ steps.release.outputs.releases }}
      prs: ${{ steps.release.outputs.prs }}
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:

      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.gh_token }}
          config-file: ${{ inputs.config }}
          manifest-file: ${{ inputs.manifest }}


  update-cargo-lock:
    name: Update Cargo.lock
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.prs_created == 'true' && inputs.update-cargo-lock }}
    strategy:
      matrix:
        pr_branch: ${{ fromJson(needs.release-please.outputs.prs).*.headBranchName }}
      fail-fast: false
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.pr_branch }}
          token: ${{ secrets.gh_token }}
          submodules: "recursive"

      # It will automatically check for rust-toolchain file in the repository
      # and take care of the proper caching to speed up CI.
      - name: Install Rust toolchain
        uses: moonrepo/setup-rust@v1

      - name: Run cargo check
        shell: 'bash -ex {0}'
        id: cargo-check
        run: |
          BRANCH="${{ matrix.pr_branch }}"
          COMPONENT="${BRANCH##*components--}"
          COMPONENT_PATH=$(cat ${{ inputs.config }} | jq -r --arg name "${COMPONENT}" '.packages[$name].path')
          ( cd "${COMPONENT_PATH}" && cargo update --workspace )
          if ! git diff --exit-code --quiet; then
            echo "needs_update=true" >> "${GITHUB_OUTPUT}"
          fi

      - name: Update Cargo.lock
        shell: 'bash -ex {0}'
        if: steps.cargo-check.outputs.needs_update == 'true'
        run: |
          git config user.name "${{ inputs.git-user-name }}"
          git config user.email "${{ inputs.git-user-email }}"
          git add .
          git commit -m "chore: update Cargo.lock"
          git push --set-upstream origin ${{ matrix.pr_branch }}


  publish-crates:
    needs: release-please
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.releases_created == 'true' && inputs.publish-to-crates-io }}
    strategy:
      matrix:
        path: ${{ fromJson(needs.release-please.outputs.paths_released) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.gh_token }}
          submodules: "recursive"

      # It will automatically check for rust-toolchain file in the repository
      # and take care of the proper caching to speed up CI.
      - name: Install Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          bins: 'cargo-workspaces'

      - name: Build the workspace before release
        shell: 'bash -ex {0}'
        if: ${{ inputs.run_build == true || inputs.run_build == 'true' }}
        working-directory: ${{ matrix.path }}
        run: cargo build

      - name: Run tests before release
        shell: 'bash -ex {0}'
        if: ${{ inputs.run_tests == true || inputs.run_tests == 'true' }}
        working-directory: ${{ matrix.path }}
        run: cargo test

      - name: Release packages to crates.io
        shell: 'bash -ex {0}'
        working-directory: ${{ matrix.path }}
        run: |
          cargo login ${{ secrets.cargo_registry_token }}
          cargo workspaces publish --from-git

      - name: Update ownership
        shell: 'bash -ex {0}'
        if: success() && inputs.org-owner != ''
        working-directory: ${{ matrix.path }}
        run: |
          ORG_OWNER=${{ inputs.org-owner }}
          cargo login ${{ secrets.cargo_registry_token }}
          for PKG in $(cargo ws list); do
            cargo owner --list --quiet ${PKG} | grep ${ORG_OWNER} || cargo owner --add ${ORG_OWNER} ${PKG}
          done

  notify-slack-if-fail:
    needs: [release-please, update-cargo-lock, publish-crates]
    name: Notify Slack
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send Slack notification if release failed
        uses: matter-labs/zksync-ci-common/.github/actions/slack-notify-release@aba-release-please-support
        with:
          webhook: ${{ secrets.slack_webhook }}
